{"version":3,"sources":["components/button/button.module.css","components/app/app.module.css","components/button/component.tsx","components/canvas/utils.ts","components/canvas/constants.ts","components/canvas/component.tsx","components/canvas/hooks.ts","components/fps/component.tsx","components/app/component.tsx","containers/app/container.tsx","containers/app/hooks.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","styles","root","button","onClick","isPlay","getSizes","canvas","universe","size","width","height","drawGrid","ctx","beginPath","strokeStyle","i","moveTo","lineTo","j","stroke","getIndex","row","column","drawCells","memory","cellsPtr","cells","Uint8Array","buffer","fillStyle","col","fillRect","Canvas","calculate","canvasRef","useRef","animationId","useEffect","current","getContext","renderLoop","tick","requestAnimationFrame","cancelAnimationFrame","onToggleCanvas","useCallback","_canvas","event","boundingRect","getBoundingClientRect","scaleX","scaleY","canvasLeft","clientX","left","canvasTop","clientY","top","Math","min","floor","toggle_cell","useRenderGame","ref","Fps","round","fps","mean","max","App","numerics","onClickPlay","AppContainer","useState","setUniverse","setMemory","setIsPlay","prevState","then","wasm","window","matchMedia","matches","Universe","new","wasmBg","error","console","log","frames","lastFrameTimeStamp","performance","now","setFps","setMean","setMin","setMax","diff","temp","push","length","shift","Infinity","sum","index","useCalculateNumerics","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ae1bab9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"button_root__3EVBt\",\"button\":\"button_button__3_GL1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"app_root__2y0JE\"};","import React from \"react\";\nimport styles from \"./button.module.css\";\n\ntype Props = {\n  isPlay: boolean;\n  onClick: () => void;\n};\n\nexport const Button: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.root}>\n      <button className={styles.button} onClick={props.onClick}>\n        {props.isPlay ? \"Pause\" : \"Play\"}\n      </button>\n    </div>\n  );\n};\n","import { CELL_SIZE, GRID_COLOR, DEAD_COLOR, ALIVE_COLOR } from \"./constants\";\nimport { Universe } from \"wasm-game-of-life\";\n\nexport const getSizes = (canvas: HTMLCanvasElement, universe: Universe) => {\n  const size = {\n    width: universe.width(),\n    height: universe.height(),\n  };\n\n  canvas.height = (CELL_SIZE + 1) * size.height + 1;\n  canvas.width = (CELL_SIZE + 1) * size.width + 1;\n  return { canvas, size };\n};\n\nexport const drawGrid = (\n  ctx: CanvasRenderingContext2D,\n  size: { width: number; height: number }\n) => {\n  ctx.beginPath();\n  ctx.strokeStyle = GRID_COLOR;\n\n  // Vertical lines.\n  for (let i = 0; i <= size.width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * size.height + 1);\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= size.height; j++) {\n    ctx.moveTo(0, j * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * size.width + 1, j * (CELL_SIZE + 1) + 1);\n  }\n\n  ctx.stroke();\n};\n\nexport const getIndex = (row: number, column: number, width: number) => {\n  return row * width + column;\n};\n\nexport const drawCells = (\n  universe: Universe,\n  memory: WebAssembly.Memory,\n  size: { width: number; height: number },\n  ctx: CanvasRenderingContext2D\n) => {\n  const cellsPtr = universe.cells();\n  // Get all memory buffer and range of this life of game\n  // cellPtr is start index and game buffer lasts until width * height(= 4096) items\n  // So here Uint8Array which is length 4096 and starts from cellsPtr is created\n  const cells = new Uint8Array(\n    memory.buffer,\n    cellsPtr,\n    size.width * size.height\n  );\n\n  ctx.beginPath();\n\n  ctx.fillStyle = ALIVE_COLOR;\n\n  for (let row = 0; row < size.height; row++) {\n    for (let col = 0; col < size.width; col++) {\n      const idx = getIndex(row, col, size.width);\n      if (cells[idx] === 0) continue;\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  ctx.fillStyle = DEAD_COLOR;\n\n  for (let row = 0; row < size.height; row++) {\n    for (let col = 0; col < size.width; col++) {\n      const idx = getIndex(row, col, size.width);\n      if (cells[idx] === 1) continue;\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  ctx.stroke();\n};\n","export const CELL_SIZE = 5; // px\nexport const GRID_COLOR = \"#CCCCCC\";\nexport const DEAD_COLOR = \"#FFFFFF\";\nexport const ALIVE_COLOR = \"#000000\";","import React from \"react\";\nimport { Universe } from \"wasm-game-of-life\";\nimport { useRenderGame } from \"./hooks\";\n\ntype Props = {\n  isPlay: boolean;\n  memory: WebAssembly.Memory;\n  universe: Universe;\n  calculate: () => void;\n};\n\nexport const Canvas: React.FC<Props> = ({\n  universe,\n  memory,\n  isPlay,\n  calculate,\n}) => {\n  const { onToggleCanvas, canvasRef } = useRenderGame(\n    universe,\n    memory,\n    isPlay,\n    calculate\n  );\n\n  return (\n    <canvas\n      ref={canvasRef}\n      onClick={onToggleCanvas(canvasRef.current)}\n    ></canvas>\n  );\n};\n","import { useRef, useEffect, useCallback } from \"react\";\nimport { getSizes, drawCells, drawGrid } from \"./utils\";\nimport { Universe } from \"wasm-game-of-life\";\nimport { CELL_SIZE } from \"./constants\";\n\nexport const useRenderGame = (\n  universe: Universe,\n  memory: WebAssembly.Memory,\n  isPlay: boolean,\n  calculate: () => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationId = useRef<number>(0);\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const { canvas, size } = getSizes(canvasRef.current, universe);\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    const renderLoop = () => {\n      calculate();\n      universe.tick();\n      drawGrid(ctx, size);\n      drawCells(universe, memory, size, ctx);\n      animationId.current = requestAnimationFrame(renderLoop);\n    };\n    drawGrid(ctx, size);\n    drawCells(universe, memory, size, ctx);\n\n    if (isPlay) {\n      renderLoop();\n    } else {\n      cancelAnimationFrame(animationId.current);\n      animationId.current = 0;\n    }\n  }, [universe, memory, isPlay, calculate]);\n\n  const onToggleCanvas = useCallback(\n    (_canvas: HTMLCanvasElement | null) =>\n      _canvas\n        ? (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n            const boundingRect = _canvas.getBoundingClientRect();\n            const { size } = getSizes(_canvas, universe);\n            const scaleX = _canvas.width / boundingRect.width;\n            const scaleY = _canvas.height / boundingRect.height;\n\n            const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n            const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n            const row = Math.min(\n              Math.floor(canvasTop / (CELL_SIZE + 1)),\n              size.height - 1\n            );\n            const col = Math.min(\n              Math.floor(canvasLeft / (CELL_SIZE + 1)),\n              size.width - 1\n            );\n            const ctx = _canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n            universe.toggle_cell(row, col);\n            drawGrid(ctx, size);\n            drawCells(universe, memory, size, ctx);\n          }\n        : () => {},\n    []\n  );\n  return { onToggleCanvas, canvasRef };\n};\n","import React from \"react\";\n\ntype Props = {\n  fps: number;\n  mean: number;\n  min: number;\n  max: number;\n};\n\nexport const Fps: React.FC<Props> = (props) => {\n  return (\n    <div>\n      <p>Frames per Second:</p>\n      <ul>\n        <li>latest = {Math.round(props.fps)}</li>\n        <li>avg of last 100 = {Math.round(props.mean)}</li>\n        <li>min of last 100 = {Math.round(props.min)}</li>\n        <li>max of last 100 = {Math.round(props.max)}</li>\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Universe } from \"wasm-game-of-life\";\nimport { Button } from \"../button\";\nimport { Canvas } from \"../canvas\";\nimport { Fps } from \"../fps\";\nimport styles from \"./app.module.css\";\n\ntype Props = {\n  universe: Universe;\n  memory: WebAssembly.Memory;\n  isPlay: boolean;\n  numerics: {\n    fps: number;\n    mean: number;\n    min: number;\n    max: number;\n  };\n  onClickPlay: () => void;\n  calculate: () => void;\n};\n\nexport const App: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.root}>\n      <Fps\n        fps={props.numerics.fps}\n        max={props.numerics.max}\n        min={props.numerics.min}\n        mean={props.numerics.mean}\n      />\n      <Button isPlay={props.isPlay} onClick={props.onClickPlay} />\n      <Canvas\n        universe={props.universe}\n        memory={props.memory}\n        isPlay={props.isPlay}\n        calculate={props.calculate}\n      />\n    </div>\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Universe } from \"wasm-game-of-life\";\nimport { App } from \"../../components/app\";\nimport { useCalculateNumerics } from \"./hooks\";\n\nexport const AppContainer = () => {\n  const [universe, setUniverse] = useState<Universe>();\n  const [memory, setMemory] = useState<WebAssembly.Memory>();\n  const [isPlay, setIsPlay] = useState<boolean>(true);\n\n  const onClickPlay = useCallback(() => {\n    setIsPlay((prevState) => !prevState);\n  }, []);\n\n  useEffect(() => {\n    try {\n      import(\"wasm-game-of-life/wasm_game_of_life\").then((wasm) => {\n        const width = window.matchMedia(\"(min-width:640px)\").matches ? 128 : 64;\n        const height = window.matchMedia(\"(min-width:640px)\").matches\n          ? 128\n          : 64;\n        setUniverse(wasm.Universe.new(width, height));\n      });\n\n      import(\"wasm-game-of-life/wasm_game_of_life_bg.wasm\").then((wasmBg) => {\n        setMemory(wasmBg.memory);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const { numerics, calculate } = useCalculateNumerics();\n  if (!universe || !memory) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <App\n        universe={universe}\n        memory={memory}\n        onClickPlay={onClickPlay}\n        isPlay={isPlay}\n        numerics={numerics}\n        calculate={calculate}\n      />\n    );\n  }\n};\n","import { useRef, useCallback, useState } from \"react\";\n\nexport const useCalculateNumerics = () => {\n  const frames: number[] = [];\n  const lastFrameTimeStamp = useRef<number>(performance.now());\n  const [fps, setFps] = useState<number>(0);\n  const [mean, setMean] = useState<number>(0);\n  const [min, setMin] = useState<number>(0);\n  const [max, setMax] = useState<number>(0);\n\n  const calculate = useCallback(() => {\n    const now = performance.now();\n    const diff = now - lastFrameTimeStamp.current;\n    lastFrameTimeStamp.current = now;\n    const temp = (1 / diff) * 1000;\n    setFps(temp);\n\n    frames.push(temp);\n    if (frames.length > 100) {\n      frames.shift();\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n\n    for (let index = 0; index < frames.length; index++) {\n      sum += frames[index];\n      min = Math.min(min, frames[index]);\n      max = Math.max(max, frames[index]);\n    }\n\n    setMax(max);\n    setMin(min);\n    setMean(sum / frames.length);\n  }, []);\n\n  const numerics = {\n    fps,\n    mean,\n    min,\n    max,\n  };\n\n  return { calculate, numerics };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { AppContainer } from \"./containers/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}